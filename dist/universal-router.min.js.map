{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n  var isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\n\nconst { hasOwnProperty } = Object.prototype;\nconst cache = new Map();\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children;\n  const cacheKey = `${route.path || ''}|${end}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(pathname);\n  if (!m) {\n    return null;\n  }\n\n  const path = m[0];\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i += 1) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath';\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true };\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          };\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex];\n            childRoute.parent = route;\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            );\n          }\n\n          const childMatch = childMatches.next(routeToSkip);\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex += 1;\n        }\n      }\n\n      return { done: true };\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params);\n  }\n\n  return undefined;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\nimport matchPath from './matchPath';\nimport matchRoute from './matchRoute';\nimport resolveRoute from './resolveRoute';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({ router: this }, options.context);\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes;\n    this.root.parent = null;\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    );\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route;\n      matches = nextMatches || match.next(routeToSkip);\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(null);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(\n          Object.assign(new Error('Page not found'), { context, status: 404, statusCode: 404 }),\n        );\n      }\n\n      return Promise.resolve(\n        resolve(Object.assign({}, context, matches.value), matches.value.params),\n      ).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result;\n        }\n\n        return next(resume, parent, result);\n      });\n    }\n\n    context.next = next;\n\n    return next(true, this.root);\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp;\nUniversalRouter.matchPath = matchPath;\nUniversalRouter.matchRoute = matchRoute;\nUniversalRouter.resolveRoute = resolveRoute;\n\nexport default UniversalRouter;\n"],"names":["pathToRegexp","parse","str","options","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","res","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","String","replace","flags","sensitive","keys","strict","end","endsWith","concat","map","route","isEndDelimited","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchPath","pathname","parentKeys","parentParams","children","cacheKey","regexp","get","set","params","assign","prop","call","split","charAt","matchRoute","baseUrl","childMatches","childIndex","routeToSkip","done","childRoute","parent","childMatch","resolveRoute","context","action","UniversalRouter","routes","router","this","root","pathnameOrContext","resolve","nextMatches","resume","parentRoute","isChildRoute","Promise","reject","Error","status","statusCode","then","result"],"mappings":"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"}